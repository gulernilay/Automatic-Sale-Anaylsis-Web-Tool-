import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

def plot_top10_products_per_year(df: pd.DataFrame) -> None:
    """
    Her yÄ±l (2020â€“2025) iÃ§in en Ã§ok satan 10 Ã¼rÃ¼nÃ¼n toplam satÄ±ÅŸlarÄ±nÄ± Ã§ubuk grafik olarak gÃ¶sterir.
    Her Ã§ubuÄŸun iÃ§ine o yÄ±lÄ±n top 10 Ã¼rÃ¼n isimlerini yazar. AyrÄ±ca detaylÄ± tabloyu gÃ¶sterir.

    Args:
        df (pd.DataFrame): SatÄ±ÅŸ verisi. 'Year', 'Date', 'ProductName', 'Sale_Amount' sÃ¼tunlarÄ±nÄ± iÃ§ermelidir.
    """
    # Verinin kopyasÄ±nÄ± al ve yÄ±l aralÄ±ÄŸÄ±nÄ± filtrele
    df_filtered = df.copy()
    df_filtered["Year"] = df_filtered["Year"].astype(int)
    df_filtered = df_filtered[df_filtered["Year"].between(2020, 2025)]
    df_filtered = df_filtered.sort_values(by="Date", ascending=True)

    # YÄ±l ve Ã¼rÃ¼n bazÄ±nda toplam satÄ±ÅŸlarÄ± hesapla
    sales_by_year_product = (
        df_filtered
        .groupby(['Year', 'ProductName'])['Sale_Amount']
        .sum()
        .reset_index()
    )

    # Her yÄ±l iÃ§in en Ã§ok satan 10 Ã¼rÃ¼nÃ¼ bul
    top10_per_year = (
        sales_by_year_product
        .sort_values(['Year', 'Sale_Amount'], ascending=[True, False])
        .groupby('Year')
        .head(10)
    )

    # Her yÄ±lÄ±n top 10 Ã¼rÃ¼nlerinin toplam satÄ±ÅŸÄ±nÄ± hesapla
    sum_top10_sales = top10_per_year.groupby('Year')['Sale_Amount'].sum().reset_index()

    # Her yÄ±lÄ±n top 10 Ã¼rÃ¼n isimlerini birleÅŸtir (Ã§ubuk iÃ§ine yazmak iÃ§in)
    top10_product_names = (
        top10_per_year.groupby('Year')['ProductName']
        .apply(lambda names: '\n'.join(names))
        .reset_index()
    )

    # Grafik oluÅŸtur
    fig, ax = plt.subplots(figsize=(16, 10))
    bars = ax.bar(
        sum_top10_sales['Year'],
        sum_top10_sales['Sale_Amount'],
        color='skyblue',
        width=0.6
    )

    # Her Ã§ubuÄŸun iÃ§ine Ã¼rÃ¼n isimlerini yaz
    for bar, label in zip(bars, top10_product_names['ProductName']):
        ax.text(
            bar.get_x() + bar.get_width() / 2,
            bar.get_height() / 2,
            label,
            ha='center',
            va='center',
            fontsize=10,
            color='black'
        )

    # Grafik baÅŸlÄ±k ve eksen ayarlarÄ±
    ax.set_title('2020â€“2025 ArasÄ± YÄ±llÄ±k En Ã‡ok Satan 10 ÃœrÃ¼nler', fontsize=18)
    ax.set_xlabel('YÄ±l', fontsize=14)
    ax.set_ylabel('Toplam SatÄ±ÅŸ MiktarÄ± (Top 10 ÃœrÃ¼n)', fontsize=14)
    ax.set_xticks(sum_top10_sales['Year'])
    ax.ticklabel_format(style='plain', axis='y')
    ax.grid(axis='y')

    # Streamlit ile grafiÄŸi ve tabloyu gÃ¶ster
    st.pyplot(fig)
    st.subheader("ğŸ“„ DetaylÄ± ÃœrÃ¼n SatÄ±ÅŸ Tablosu (Her YÄ±lÄ±n En Ã‡ok Satan 10 ÃœrÃ¼nÃ¼)")
    st.dataframe(top10_per_year.sort_values(['Year', 'Sale_Amount'], ascending=[True, False]))


def plot_top10_productsandcustomers_per_year(df: pd.DataFrame) -> None:
    """
    Her yÄ±l (2020â€“2025) iÃ§in en Ã§ok satan 10 mÃ¼ÅŸteri-Ã¼rÃ¼n kombinasyonunun toplam satÄ±ÅŸlarÄ±nÄ± Ã§ubuk grafik olarak gÃ¶sterir.
    Her Ã§ubuÄŸun iÃ§ine o yÄ±lÄ±n top 10 mÃ¼ÅŸteri-Ã¼rÃ¼n kombinasyonunu yazar. AyrÄ±ca detaylÄ± tabloyu gÃ¶sterir.

    Args:
        df (pd.DataFrame): SatÄ±ÅŸ verisi. 'Year', 'Date', 'CustomerName', 'ProductName', 'Sale_Amount' sÃ¼tunlarÄ±nÄ± iÃ§ermelidir.
    """
    # Verinin kopyasÄ±nÄ± al ve yÄ±l aralÄ±ÄŸÄ±nÄ± filtrele
    df_filtered = df.copy()
    df_filtered = df_filtered[df_filtered["Year"].between(2020, 2025)]
    df_filtered["Year"] = df_filtered["Year"].astype(int)
    df_filtered = df_filtered.sort_values(by="Date", ascending=True)

    # YÄ±l, mÃ¼ÅŸteri ve Ã¼rÃ¼n bazÄ±nda toplam satÄ±ÅŸlarÄ± hesapla
    sales_by_year_product_customer = (
        df_filtered
        .groupby(['Year', 'CustomerName', 'ProductName'])['Sale_Amount']
        .sum()
        .reset_index()
    )

    # Her yÄ±l iÃ§in en Ã§ok satan 10 mÃ¼ÅŸteri-Ã¼rÃ¼n kombinasyonunu bul
    top10_per_year_product = (
        sales_by_year_product_customer
        .sort_values(['Year', 'Sale_Amount'], ascending=[True, False])
        .groupby('Year')
        .head(10)
    )

    # MÃ¼ÅŸteri ve Ã¼rÃ¼n adlarÄ±nÄ± birleÅŸtir (etiket olarak)
    top10_per_year_product['Label'] = (
        top10_per_year_product['CustomerName'] + " - " + top10_per_year_product['ProductName']
    )

    # Her yÄ±l iÃ§in etiketleri birleÅŸtir (Ã§ubuk iÃ§ine yazmak iÃ§in)
    top10_product_labels = (
        top10_per_year_product.groupby('Year')['Label']
        .apply(lambda names: '\n'.join(names))
        .reset_index()
    )

    # Her yÄ±lÄ±n top 10 mÃ¼ÅŸteri-Ã¼rÃ¼n kombinasyonunun toplam satÄ±ÅŸÄ±nÄ± hesapla
    sum_top10_sales = top10_per_year_product.groupby('Year')['Sale_Amount'].sum().reset_index()

    # Grafik oluÅŸtur
    fig, ax = plt.subplots(figsize=(16, 10))
    bars = ax.bar(
        sum_top10_sales['Year'],
        sum_top10_sales['Sale_Amount'],
        color='skyblue',
        width=0.6
    )

    # Her Ã§ubuÄŸun iÃ§ine mÃ¼ÅŸteri-Ã¼rÃ¼n etiketlerini yaz
    for bar, label in zip(bars, top10_product_labels['Label']):
        ax.text(
            bar.get_x() + bar.get_width() / 2,
            bar.get_height() / 2,
            label,
            ha='center',
            va='center',
            fontsize=10,
            color='black'
        )

    # Grafik baÅŸlÄ±k ve eksen ayarlarÄ±
    ax.set_title('2020â€“2025 ArasÄ± YÄ±llÄ±k En Ã‡ok Satan 10 MÃ¼ÅŸteri-ÃœrÃ¼n', fontsize=18)
    ax.set_xlabel('YÄ±l', fontsize=14)
    ax.set_ylabel('Toplam SatÄ±ÅŸ MiktarÄ± (Top 10)', fontsize=14)
    ax.set_xticks(sum_top10_sales['Year'])
    ax.ticklabel_format(style='plain', axis='y')
    ax.grid(axis='y')

    # Streamlit ile grafiÄŸi ve tabloyu gÃ¶ster
    st.pyplot(fig)
    st.subheader("ğŸ“„ DetaylÄ± SatÄ±ÅŸ Tablosu (Her YÄ±lÄ±n En Ã‡ok Satan 10 MÃ¼ÅŸteri-ÃœrÃ¼n)")
    st.dataframe(top10_per_year_product.sort_values(['Year', 'Sale_Amount'], ascending=[True, False]))